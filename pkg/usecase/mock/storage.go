// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/storage.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/suzuito/blog1-go/pkg/entity"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteArticle mocks base method.
func (m *MockStorage) DeleteArticle(ctx context.Context, articleID entity.ArticleID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockStorageMockRecorder) DeleteArticle(ctx, articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockStorage)(nil).DeleteArticle), ctx, articleID)
}

// GetFileAsHTTPResponse mocks base method.
func (m *MockStorage) GetFileAsHTTPResponse(ctx context.Context, p string, body *[]byte, headers *map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileAsHTTPResponse", ctx, p, body, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFileAsHTTPResponse indicates an expected call of GetFileAsHTTPResponse.
func (mr *MockStorageMockRecorder) GetFileAsHTTPResponse(ctx, p, body, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileAsHTTPResponse", reflect.TypeOf((*MockStorage)(nil).GetFileAsHTTPResponse), ctx, p, body, headers)
}

// UploadArticle mocks base method.
func (m *MockStorage) UploadArticle(ctx context.Context, article *entity.Article, raw string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArticle", ctx, article, raw)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadArticle indicates an expected call of UploadArticle.
func (mr *MockStorageMockRecorder) UploadArticle(ctx, article, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArticle", reflect.TypeOf((*MockStorage)(nil).UploadArticle), ctx, article, raw)
}

// UploadHTML mocks base method.
func (m *MockStorage) UploadHTML(ctx context.Context, p, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadHTML", ctx, p, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadHTML indicates an expected call of UploadHTML.
func (mr *MockStorageMockRecorder) UploadHTML(ctx, p, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadHTML", reflect.TypeOf((*MockStorage)(nil).UploadHTML), ctx, p, body)
}
