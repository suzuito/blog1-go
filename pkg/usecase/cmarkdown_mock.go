// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/cmarkdown.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMDConverter is a mock of MDConverter interface.
type MockMDConverter struct {
	ctrl     *gomock.Controller
	recorder *MockMDConverterMockRecorder
}

// MockMDConverterMockRecorder is the mock recorder for MockMDConverter.
type MockMDConverterMockRecorder struct {
	mock *MockMDConverter
}

// NewMockMDConverter creates a new mock instance.
func NewMockMDConverter(ctrl *gomock.Controller) *MockMDConverter {
	mock := &MockMDConverter{ctrl: ctrl}
	mock.recorder = &MockMDConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMDConverter) EXPECT() *MockMDConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockMDConverter) Convert(ctx context.Context, src string, dst *string, meta *CMMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", ctx, src, dst, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Convert indicates an expected call of Convert.
func (mr *MockMDConverterMockRecorder) Convert(ctx, src, dst, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockMDConverter)(nil).Convert), ctx, src, dst, meta)
}
